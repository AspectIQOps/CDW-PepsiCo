services:
  # ==========================================================
  # PostgreSQL Database Service
  # ==========================================================
  postgres:
    image: postgres:16
    container_name: pepsico-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=appd_ro
      - POSTGRES_PASSWORD=appd_pass
      - POSTGRES_DB=appd_licensing
      - TZ=America/New_York
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # SQL scripts run in alpha-numberic order (01_schema, 02_seed_dimensions)
      - ./sql/init:/docker-entrypoint-initdb.d:ro
      #- ./sql/transform:/sql/transform:ro
    ports:
      - "5432:5432"
    networks:
      - pepsico-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U appd_ro -d appd_licensing"]
      interval: 5s
      timeout: 5s
      retries: 5

  # ==========================================================
  # Grafana Visualization Service
  # ==========================================================
  grafana:
    image: grafana/grafana:12.2.1
    container_name: pepsico-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - TZ=America/New_York
    volumes:
      - grafana_data:/var/lib/grafana
      # --- START OF FIX ---
      # 1. Mount datasources YAML
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      # 2. Mount dashboard provisioning YAML (dashboard.yml)
      # Assuming dashboard.yml is in your local ./config/grafana/provisioning
      - ./config/grafana/provisioning:/etc/grafana/provisioning/dashboards:ro
      # 3. CRITICAL FIX: Mount local dashboard JSON files to the path specified in dashboard.yml
      # This resolves the "no such file or directory" error for /var/lib/grafana/dashboards
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    networks:
      - pepsico-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "/dev/null", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ==========================================================
  # ETL Services (AppDynamics & ServiceNow)
  # ==========================================================
  # NEW: Unified service - for running the FULL pipeline
  # Individual ETL Services - For testing/debugging specific components
  etl_appd:
    build:
      context: .
      dockerfile: docker/etl/Dockerfile
    container_name: pepsico-etl-appd
    restart: "no"
    command: ["python3", "/app/scripts/etl/appd_etl.py"]  # FIXED: Direct execution
    env_file: .env
    environment:
      - DB_HOST=postgres
      - SSM_PATH=${SSM_PATH:-/aspectiq/demo}
    volumes:
      - ./scripts:/app/scripts:ro
      - ./docker/etl:/app/docker/etl:ro
      - etl_logs:/var/log/etl
      - ~/.aws:/root/.aws:ro
    networks:
      - pepsico-network
    depends_on:
      postgres:
        condition: service_healthy

  etl_snow:
    build:
      context: .
      dockerfile: docker/etl/Dockerfile
    container_name: pepsico-etl-snow
    restart: "no"
    command: ["python3", "/app/scripts/etl/snow_etl.py"]  # FIXED: Direct execution
    env_file: .env
    environment:
      - DB_HOST=postgres
      - SSM_PATH=${SSM_PATH:-/aspectiq/demo}
    volumes:
      - ./scripts:/app/scripts:ro
      - ./docker/etl:/app/docker/etl:ro
      - etl_logs:/var/log/etl
      - ~/.aws:/root/.aws:ro
    networks:
      - pepsico-network
    depends_on:
      postgres:
        condition: service_healthy

  # Unified ETL Service - Runs complete pipeline via entrypoint.sh
  etl:
    build:
      context: .
      dockerfile: docker/etl/Dockerfile
    container_name: pepsico-etl-unified
    restart: "no"
    command: ["./entrypoint.sh"]  # Orchestrates all ETL steps
    env_file: .env
    environment:
      - DB_HOST=postgres
      - SSM_PATH=${SSM_PATH:-/aspectiq/demo}
    volumes:
      - ./scripts:/app/scripts:ro
      - ./docker/etl:/app/docker/etl:ro
      - ./sql:/app/sql:ro
      - etl_logs:/var/log/etl
      - ~/.aws:/root/.aws:ro
    networks:
      - pepsico-network
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_data:
    name: pepsico_postgres_data
  grafana_data:
    name: pepsico_grafana_data
  etl_logs:
    name: pepsico_etl_logs

networks:
  pepsico-network:
    name: pepsico-network
    driver: bridge
