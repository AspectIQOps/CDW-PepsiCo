# Phase 2: Grafana Cloud Integration - Complete Guide

## üéØ Overview
This guide walks you through connecting Grafana Cloud to your local PostgreSQL database using Cloudflare Tunnel.

---

## ‚úÖ Prerequisites Checklist

- [ ] Docker containers running (`docker ps`)
- [ ] Backup of project created ‚úÖ (you mentioned this morning)
- [ ] Grafana Cloud account: https://aspectiq.grafana.net/
- [ ] Cloudflare account (free tier is fine)

---

## üìã Implementation Steps

### Step 1: Stop and Remove Local Grafana

```bash
# Stop all containers
docker-compose down

# Remove old Grafana volume (optional - saves space)
docker volume rm pepsico_grafana_data
docker volume rm pepsico_alloy_data
```

### Step 2: Replace docker-compose.yaml

Replace your current `docker-compose.yaml` with the Phase 2 version (see artifact above).

**Key Changes:**
- ‚ùå Removed `grafana` service
- ‚ùå Removed `alloy` service
- ‚úÖ PostgreSQL still exposed on port 5432

### Step 3: Start Updated Stack

```bash
# Start containers with new configuration
docker-compose up -d

# Verify PostgreSQL is running and accessible
docker exec -it pepsico-postgres psql -U appd_ro -d appd_licensing -c "SELECT COUNT(*) FROM applications_dim;"
```

### Step 4: Create Read-Only Grafana User

```bash
# Copy the SQL file to your project directory
# Then run:
docker exec -i pepsico-postgres psql -U appd_ro -d appd_licensing < create_grafana_user.sql

# Verify the user was created
docker exec -it pepsico-postgres psql -U appd_ro -d appd_licensing -c "\du grafana_cloud"
```

**Expected Output:**
```
                                   List of roles
   Role name   |                         Attributes                         
---------------+------------------------------------------------------------
 grafana_cloud | 
```

### Step 5: Install Cloudflare Tunnel

```bash
# Make the setup script executable
chmod +x setup_cloudflare_tunnel.sh

# Run the installation script
./setup_cloudflare_tunnel.sh
```

**macOS Alternative:**
```bash
brew install cloudflared
```

**Linux Alternative:**
```bash
# Debian/Ubuntu
wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
sudo dpkg -i cloudflared-linux-amd64.deb
```

### Step 6: Authenticate with Cloudflare

```bash
# This will open a browser window for authentication
cloudflared tunnel login
```

**What Happens:**
1. Browser opens to Cloudflare login
2. Select your Cloudflare account
3. Choose which domain to use (or skip if you don't have one yet)
4. Certificate is saved to `~/.cloudflared/cert.pem`

### Step 7: Create the Tunnel

```bash
# Create a named tunnel
cloudflared tunnel create pepsico-postgres

# Output will look like:
# Tunnel credentials written to /Users/yourname/.cloudflared/12345678-1234-1234-1234-123456789abc.json
# Created tunnel pepsico-postgres with id 12345678-1234-1234-1234-123456789abc
```

**Save the Tunnel ID** - you'll need it for the config file!

### Step 8: Configure the Tunnel

Create the configuration file:

```bash
# Create or edit the config file
nano ~/.cloudflared/config.yml
```

Use the `cloudflared-config.yml` artifact content, replacing:
- `<TUNNEL-ID>` with your actual tunnel ID from Step 7
- `<YOUR-USERNAME>` with your system username
- `pepsico-postgres.yourdomain.com` with your desired hostname

**Option A: If you have a domain in Cloudflare**
```yaml
tunnel: 12345678-1234-1234-1234-123456789abc
credentials-file: /Users/yourname/.cloudflared/12345678-1234-1234-1234-123456789abc.json

ingress:
  - hostname: pepsico-postgres.yourdomain.com
    service: tcp://localhost:5432
    originRequest:
      noTLSVerify: true
  - service: http_status:404
```

**Option B: If you DON'T have a domain (Quick Start)**
```yaml
tunnel: 12345678-1234-1234-1234-123456789abc
credentials-file: /Users/yourname/.cloudflared/12345678-1234-1234-1234-123456789abc.json

ingress:
  - service: tcp://localhost:5432
```

### Step 9: Create DNS Record (If using a domain)

```bash
# Route DNS through the tunnel
cloudflared tunnel route dns pepsico-postgres pepsico-postgres.yourdomain.com
```

### Step 10: Start the Tunnel

```bash
# Run the tunnel (foreground - for testing)
cloudflared tunnel run pepsico-postgres

# You should see:
# INF Connection established connIndex=0
# INF Registered tunnel connection
```

**For Production (Background):**
```bash
# Install as a service (macOS)
sudo cloudflared service install

# Start the service
sudo launchctl start com.cloudflare.cloudflared

# Check status
sudo launchctl list | grep cloudflare
```

**For Production (Linux):**
```bash
# Install as a service
sudo cloudflared service install

# Start the service
sudo systemctl start cloudflared
sudo systemctl enable cloudflared

# Check status
sudo systemctl status cloudflared
```

### Step 11: Get Your Tunnel Connection Info

```bash
# List your tunnels
cloudflared tunnel info pepsico-postgres
```

**Important Info You'll Need:**
1. **Tunnel ID**: `12345678-1234-1234-1234-123456789abc`
2. **Hostname**: `pepsico-postgres.yourdomain.com` (if configured)
3. **Or use the auto-generated hostname** from the tunnel info

---

## üîó Configure Grafana Cloud Data Source

### Step 12: Add PostgreSQL Data Source in Grafana Cloud

1. Go to: https://aspectiq.grafana.net/
2. Click **Connections** ‚Üí **Data sources**
3. Click **Add data source**
4. Search for and select **PostgreSQL**

**Configuration:**

```yaml
Name: PepsiCo AppDynamics Licensing

Host: pepsico-postgres.yourdomain.com:5432
  (or use Cloudflare's auto-generated hostname)

Database: appd_licensing

User: grafana_cloud

Password: grafana_secure_pass_2024

TLS/SSL Mode: disable
  (since we're using Cloudflare Tunnel encryption)

Version: 16

Max open connections: 10
Max idle connections: 2
Max connection lifetime: 14400
```

5. Click **Save & Test**

**Expected Result:** ‚úÖ "Database Connection OK"

---

## üß™ Testing & Verification

### Test 1: Connection Test

```bash
# From your local machine
psql -h localhost -U grafana_cloud -d appd_licensing -c "SELECT COUNT(*) FROM applications_dim;"
```

**Expected Output:**
```
 count 
-------
    40
(1 row)
```

### Test 2: Query Test in Grafana Cloud

In Grafana Cloud, go to **Explore** and run:

```sql
SELECT 
  app_id, 
  appd_application_name, 
  owner_name, 
  sector_name 
FROM app_cross_reference_v 
LIMIT 10;
```

**Expected:** Should return 10 rows of application data

### Test 3: Dashboard Import Test

1. Go to **Dashboards** ‚Üí **New** ‚Üí **Import**
2. Upload one of your 8 dashboard JSONs
3. Select the PostgreSQL data source you created
4. Click **Import**

**Expected:** Dashboard loads with data

---

## üéâ Phase 2 Complete!

You should now have:
- ‚úÖ Grafana Cloud connected to local PostgreSQL
- ‚úÖ Secure tunnel via Cloudflare
- ‚úÖ Read-only database user
- ‚úÖ All 8 dashboards imported and working
- ‚úÖ ETL services still functional locally

---

## üîß Troubleshooting

### Issue: "Database Connection Failed"

**Check:**
1. Is the tunnel running? `cloudflared tunnel info pepsico-postgres`
2. Is PostgreSQL accessible locally? `docker ps | grep postgres`
3. Can you connect locally with grafana_cloud user?
4. Check Cloudflare dashboard for tunnel status

### Issue: "Permission Denied for Table"

**Fix:**
```sql
-- Connect to database
docker exec -it pepsico-postgres psql -U appd_ro -d appd_licensing

-- Grant permissions
GRANT SELECT ON ALL TABLES IN SCHEMA public TO grafana_cloud;
```

### Issue: "No Data in Dashboards"

**Check:**
1. Run test query in Explore
2. Verify data exists: `SELECT COUNT(*) FROM license_usage_fact;`
3. Check time range in dashboard (should cover July 30 - Oct 28, 2025)

### Issue: "Tunnel Keeps Disconnecting"

**Fix:**
```bash
# Check logs
tail -f /var/log/cloudflared/cloudflared.log

# Restart tunnel
cloudflared tunnel run pepsico-postgres
```

---

## üìä Next Steps

Once Phase 2 is validated:

1. **Client Preview**
   - Share Grafana Cloud URL with client
   - Configure SSO (if required)
   - Gather feedback on dashboards

2. **Prepare for Phase 3**
   - Document AWS requirements
   - Prepare Terraform infrastructure
   - Plan data migration to RDS

3. **Optional Enhancements**
   - Set up Grafana Cloud alerts
   - Configure dashboard folders/permissions
   - Add dashboard snapshots for reporting

---

## üîí Security Notes

- ‚úÖ Cloudflare Tunnel provides encrypted connection
- ‚úÖ Read-only database user limits exposure
- ‚úÖ No public IP exposure of your database
- ‚ö†Ô∏è Phase 2 is suitable for **demo/preview only**
- ‚ö†Ô∏è For production, move to Phase 3 (AWS RDS + VPC)

---

## üí∞ Cost Breakdown (Phase 2)

| Service | Cost |
|---------|------|
| Cloudflare Tunnel | **FREE** |
| Grafana Cloud (Free tier) | **$0** |
| Grafana Cloud (Pro - if needed) | $29-75/mo |
| Local compute | **$0** (your machine) |

**Total: $0-75/month**

---

## üìù Maintenance

**Daily:**
- Monitor tunnel status
- Check ETL job success

**Weekly:**
- Review Grafana Cloud usage (free tier limits)
- Backup PostgreSQL data

**Monthly:**
- Review dashboard performance
- Prepare for Phase 3 migration